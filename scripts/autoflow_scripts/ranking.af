rank_genes_classic){
	# Input: seed_gens + kernel.
	# Output: rank genes for every gen.
	source ~soft_bio_267/initializes/init_netanalyzer
	. ~soft_bio_267/initializes/init_ruby
	#export PATH=/mnt/home/users/bio_267_uma/federogc/dev_gems/NetAnalyzer/bin:$PATH
	if [ $method != "classic" ] ; then
		exit 0
	fi
	echo -e "$param1_$kernel\t$param1\t$kernel" > tracker
	ranking_path=`pwd`
	##
    awk 'BEGIN{OFS="\t";}{print $1,$1}' $control_pos > seed_by_group
	##
	cat $control_pos $control_neg | aggregate_column_data.rb -i - -x 0 -a 1 > filter
	##
	desaggregate_column_data.rb -i $control_pos -x 1 |& awk '{OFS="\t"}{print $1,$2,1}' > tags
	desaggregate_column_data.rb -i $control_neg -x 1 |& awk '{OFS="\t"}{print $1,$2,0}' >> tags
	##
	?
	ranker_gene.rb -k $folder_kernel_path/$input_name -n $folder_kernel_path/$input_name.lst -s seed_by_group -f filter
	# ranked_genes_all_candidates
	# Now we get the ranked files and we add the tags
	add_tags2ranks.rb -i ranked_genes_all_candidates -g 5 -c 0 -t tags -o tagged_ranks.txt

	# Add ROCR 
	# Add metrics for positive and negatives in RANK.

	number_of_positive_genes=`wc -l positive_genes_all_candidates | cut -f1 -d " "`
	number_of_negative_genes=`wc -l negative_genes_all_candidates | cut -f1 -d " "`


	# Obtaining Positives Metrics and CDF.
    if [ $number_of_positive_genes -ge 1 ] ; then 
		rank_metrics.rb -r positive_genes_all_candidates -e "stats" > prerank_metrics_from_positive
		rank_metrics.rb -r positive_genes_all_candidates  -e "ranks" > prerank_list
		if [ -a prerank_metrics_from_positive ] ; then
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ /,"_",$0); print tracker,$1,$2}' \ 
			  prerank_metrics_from_positive > $output_name_positive_metrics 
			# ../../../$output_name_metrics TODO: Try this.
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{print tracker,$0}' prerank_list > $output_name_cdf 
            #../../../$output_name_list
		else 
		  	exit 0
		fi
	else 
		exit 0
	fi


	# Obtaining ROCR metrics from positives and negatives genes.
	awk 'BEGIN{OFS="\t";}{print $0,1}' positive_genes_all_candidates > positives_with_tags
	awk 'BEGIN{OFS="\t";}{print $0,0}' negative_genes_all_candidates > negatives_with_tags
	cat positives_with_tags negatives_with_tags > all_genes_with_tags.txt

	ROCanalysis.R -i all_genes_with_tags.txt -s 3 -t 7 -S backupgenes -o "preobserved_all_genes" -e
	sed -i '1d' preobserved_all_genes_measures
	cut -f 2,3,4,5,6,7 preobserved_all_genes_measures > observed_all_genes_measures

	if [ -a observed_all_genes_measures ] ; then
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ /,"_",$0); print tracker,$0}' \ 
		  observed_all_genes_measures > $output_name_observed_all_genes_measures
	else 
	  	exit 0
	fi

}

rank_genes_with_leave_one_out){
	# Input: seed_gens + kernel.
	# Output: rank genes for every gen.
	source ~soft_bio_267/initializes/init_netanalyzer
	. ~soft_bio_267/initializes/init_ruby
	#export PATH=/mnt/home/users/bio_267_uma/federogc/dev_gems/NetAnalyzer/bin:$PATH
	if [ $method != "leave_one_out" ] ; then
		exit 0
	fi
	echo -e "$param1_$kernel\t$param1\t$kernel" > tracker
	ranking_path=`pwd`
	?
	ranker_gene.rb -k $folder_kernel_path/$input_name -n $folder_kernel_path/$input_name.lst -s $control_pos -l -f $control_neg
	# Realizar un etiquetado pos_neg
	# Seleccionar los pos para realizar los cÃ¡lculos de cdf, etc.  
	number_of_all_candidates=`wc -l ranked_genes_all_candidates | cut -f1 -d " "`
    if [ $number_of_all_candidates -ge 1 ] ; then 
		rank_metrics.rb -r ranked_genes_all_candidates -e "stats" > prerank_metrics
		rank_metrics.rb -r ranked_genes_all_candidates  -e "ranks" > prerank_list
		if [ -a prerank_metrics ] ; then
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ /,"_",$0); print tracker,$1,$2}' \ 
			  prerank_metrics > $output_name_metrics
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{print tracker,$0}' prerank_list > $output_name_list 
		else 
		  	exit 1
		fi
	else 
		exit 0
	fi
	# Seleccionar todo para llevar a cabo las mÃ©tricas con ROCR.
}

rank_genes_production){
	# Input: seed_gens + kernel.
	# Output: rank genes for seed
	source ~soft_bio_267/initializes/init_netanalyzer
	source ~soft_bio_267/initializes/init_ruby
	if [ $method != "production" ] ; then
		exit 0
	fi
	echo -e "$param1_$kernel\t$param1\t$kernel" > tracker
	?
	ranker_gene.rb -k $folder_kernel_path/$input_name -n $folder_kernel_path/$input_name.lst -s $geneseeds
	number_of_all_candidates=`wc -l ranked_genes_all_candidates | cut -f1 -d " "`
    if [ $number_of_all_candidates -ge 1 ] ; then 
    	mv ranked_genes_all_candidates ranked_production_candidates
	else 
		exit 0
	fi
}



