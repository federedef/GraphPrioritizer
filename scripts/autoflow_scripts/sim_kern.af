get_similarity){
	resources: -m '200gb' -t '4-00:00:00' -c 4
	# Input: Tab file in: paco format for ontologies, pairs format for network.
	# Output: Similarity list
	source ~soft_bio_267/initializes/init_python
	#source ~/dev_py/myvenv/bin/activate
	source ~soft_bio_267/initializes/init_R
	echo -e "$annotation_sim" > tracker
	similarity_path=`pwd`

	net2json_parser.py --net_id "$annotation" --json_path $net2custom > net_params
	source=`grep -P -w '^Source' net_params | cut -f 2`
	format=`grep -P -w '^Format' net_params | cut -f 2`
	layers=`grep -P -w '^Layers' net_params | cut -f 2`
	ontology=`grep -P -w '^Ontology' net_params | cut -f 2`
	if [ -z $whitelist ] ; then
		node_files=`grep -P -w '^Node_list' net_params | cut -f 2 | awk -v prefix="$input_path/input_processed/" '{print prefix $0}' | tr -s '\n' ','`
		network_file=$input_path/input_processed/$source
	else 
		node_files=`grep -P -w '^Node_list' net_params | cut -f 2 | awk -v prefix="$input_path/input_processed/whitelist/" '{print prefix $0}' | tr -s '\n' ','`
		network_file=$input_path/input_processed/whitelist/$source
	fi
	echo $node_files
	echo $network_file

	custom_parameters=`grep -P -w '^Custom' net_params | cut -f 2`
	grep -P -w '^Build_graph' net_params | cut -f 2 > dsl
	echo -e "$source" > tracker_annotation

	rm stats_from_matrix*
	?
	if [ "$format" == "matrix" ] ; then
		netanalyzer -i $network_file -n $node_files -f $format -l $layers --both_repre_formats --dsl_script dsl
  else                                                                                                                                                  
  	if [ "$ontology" != "-" ] ; then
  		desaggregate_column_data -i $network_file -x 2 > ont_profs
  		netanalyzer -i ont_profs -f $format -l $layers -T [cpu] -O "ont:`semtools -d list | grep $ontology`" --dsl_script dsl 
  	else
  		netanalyzer -i $network_file -f $format -l $layers --dsl_script dsl
  	fi
  fi
  cut -f 2,3 preproc_metrics > tmp
  cp preproc_metrics original_preproc_metrics
  mv tmp preproc_metrics
  mv similarity_matrix_bin_rowIds similarity_matrix_bin.lst

  for file in `ls | grep "stats_from_matrix" | sort -k 5 -t "_" -n` ; do
    var=`echo -e "$file" | sed 's/stats_from_matrix_//' | sed 's/_[0-9]//'`
    tag_table -i $file -t $var >> tmp_stats_matrix 
  done
  mv tmp_stats_matrix stats_from_matrix

	if [ -s stats_from_matrix -a preproc_metrics ] ; then 
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$2); gsub(/ /,"_",$0); print tracker,$1,$2,$3}' stats_from_matrix > stats_by_steps
		head -n 11 preproc_metrics > tmp && mv tmp preproc_metrics
		awk -v tracker="`cat tracker_annotation`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ /,"_",$0); print tracker,$1,$2}' preproc_metrics > annotations_metrics
	else
		exit 1
	fi
}


filter_net){
	resources: -m '20gb' -t '0-00:10:00'
	source ~soft_bio_267/initializes/init_python
	#source ~/dev_py/myvenv/bin/activate
	echo -e "$annotation_sim" > tracker
	net2json_parser.py --net_id "$annotation" --json_path $net2custom > net_params
	grep -P -w '^Filter' net_params | cut -f 2 > dsl_filter
	cp get_similarity)/similarity_matrix_bin.lst ./similarity_matrix_bin.lst
	cp get_similarity)/stats_by_steps ./stats_by_steps
	rm stats_from_matrix*
	?
	if [ -s dsl_filter ] ; then
		echo "filtering matrix"
    	netanalyzer -i get_similarity)/similarity_matrix_bin.npy -f "bin" -l "gene" -n similarity_matrix_bin.lst --dsl_script dsl_filter
		mv similarity_matrix_bin_rowIds similarity_matrix_bin.lst

	else 
		echo "Not filtering matrix"
		ln -sf get_similarity)/similarity_matrix_bin.npy ./similarity_matrix_bin.npy
    fi


    for file in `ls | grep "stats_from_matrix" | sort -k 5 -t "_" -n` ; do
      var=`echo -e "$file" | sed 's/stats_from_matrix_//' | sed 's/_[0-9]//'`
      tag_table -i $file -t $var >> tmp_stats_matrix 
    done
    mv tmp_stats_matrix stats_from_matrix

    if [ -s stats_from_matrix ] ; then 
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$2); gsub(/ /,"_",$0); print tracker,$1,$2,$3}' stats_from_matrix >> stats_by_steps
	fi

    if [ ! -s similarity_matrix_bin.npy ] ; then
    	exit 1
    fi
}

normalize_adjMatrix){
	resources: -m '60gb' -t '0-02:30:00'
	source ~soft_bio_267/initializes/init_python
	#source ~/dev_py/myvenv/bin/activate
	echo -e "$annotation_sim" > tracker
	echo -e "normalize_matrix ('adjacency_matrices',('gene','gene')) by='rows_cols'" > dsl
	#echo -e "normalize_matrix ('adjacency_matrices',('gene','gene')) by='min_max'" > dsl
	echo -e "write_matrix ('adjacency_matrices',('gene','gene')) 'similarity_matrix_bin'" >> dsl
	echo -e "write_stats_from_matrix ('adjacency_matrices',('gene','gene')) output_filename='stats_from_matrix_1'" >> dsl
	cp filter_net)/similarity_matrix_bin.lst ./similarity_matrix_bin.lst
	cp filter_net)/stats_by_steps ./stats_by_steps
	rm stats_from_matrix
	rm final_stats_by_steps
	?
	netanalyzer -i filter_net)/similarity_matrix_bin.npy -f "bin" -l "gene" -n ./similarity_matrix_bin.lst --dsl_script dsl
	tag_table -i stats_from_matrix_1 -t "Normalization" > stats_from_matrix
	if [ -s stats_from_matrix ] ; then 
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$2); gsub(/ /,"_",$0); print tracker,$1,$2,$3}' stats_from_matrix >> stats_by_steps
		awk '{OFS="\t"}{print $1"_"$2,$0}' stats_by_steps > final_stats_by_steps
	fi
}


calc_kernel_[$kernels_varflow]){
	resources: -c 16 -m '500gb' -t '1-00:00:00'
	# input: Similarity binary matrix
	# output: binary Kernel from similarity matrix + metrics
	# source ~soft_bio_267/initializes/init_netanalyzer
	source ~soft_bio_267/initializes/init_python
	#source ~/dev_py/myvenv/bin/activate
	echo -e "$annotation_(*)\t$annotation\t(*)" > tracker
	cp normalize_adjMatrix)/similarity_matrix_bin.lst kernel_matrix_bin.lst # To pass the list of node names.
	kern_net_path=`pwd`
	export OMP_NUM_THREADS=[cpu]
	if [ -s ugot_path ] ; then
		rm ugot_path
	fi
	if [ -s kernel_matrix_bin ] ; then
		rm kernel_matrix_bin
	fi
	?
	if [ "(*)" == "node2vec" ] ; then
		#nod2vec.py -i normalize_adjMatrix)/similarity_matrix_bin.npy 
		netanalyzer -i normalize_adjMatrix)/similarity_matrix_bin.npy -f bin -l 'genes' -k (*) -n kernel_matrix_bin.lst -u 'genes' -K ./kernel_matrix_bin --both_repre_formats --embedding_add_options "'workers':16"                                                    
	elif [ "(*)" == "raw_sim" ] ; then
		ln -s normalize_adjMatrix)/similarity_matrix_bin.npy kernel_matrix_bin.npy
	else
		netanalyzer -i normalize_adjMatrix)/similarity_matrix_bin.npy -f bin -l 'genes' -k (*) -n kernel_matrix_bin.lst -u 'genes' -K ./kernel_matrix_bin
	fi

	if [ -s kernel_matrix_bin.npy ] ; then
		echo -e "$annotation_(*)\t$annotation\t(*)\t$kern_net_path" > ugot_path 
	else 
  		exit 1
  	fi
}

stats_kernels_[$kernels_varflow]){
	resources: -m '120gb' -t '1-00:00:00'
	source ~soft_bio_267/initializes/init_python
	#source ~/dev_py/myvenv/bin/activate
	if [ -s tracker ] ; then
		rm tracker
		# TODO: Remove this part and check
	fi
	if [ -s kernel_metrics ] ; then
		rm kernel_metrics
	fi
	ln -s !calc_kernel_*!/tracker
	?
	text2binary_matrix -i !calc_kernel_*!/kernel_matrix_bin.npy -o kernel_matrix_undo -t bin -s kernel_metrics
	if [ -s kernel_metrics ] ; then
		rm kernel_matrix_undo.npy
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' kernel_metrics > uncomb_kernel_metrics
	else 
  		exit 1
  	fi
}