pairs_to_paco_[$nets]){
	source ~soft_bio_267/initializes/init_ruby 
	echo -e "(*)" > tracker
	exec_mode=`grep -P '^(*)' $net2custom | cut -f 3`
	?
	text2binary_matrix.rb -i $input_path/input_processed/(*) -o annotation_matrix_bin -t pair -s > annotations_metrics
	#if [ -s annotations_metrics ] ; then 
	#	awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' annotations_metrics >> ../annotations_metrics
	#else
	#	exit 1
	#fi
	## TODO: remove "| head -n 100" when big test required.
	#if [ "$exec_mode" == "ontology" ] ; then
	#	aggregate_column_data.rb -i $input_path/(*) -x 0 -a 1 | head -n 100 > (*)
	#elif [ "$exec_mode" == "network" ] ; then 
	#	$input_path/(*) > (*)
	#fi
}

%calc_similarity_[$nets]){
	# Input: Tab file gen\tOnto_element1;Onto_element2;... + Archivo .obo
	# Output: Similarity binary Matrix + Metrics
	source ~soft_bio_267/initializes/init_ruby 
	#source ~josecordoba/software/initializes/init_semtools_script 
	source ~soft_bio_267/initializes/init_R

	echo -e "(*)" > tracker
	similarity_path=`pwd`
	net_id=`grep -P '^(*)' $net2custom | cut -f 1`
	ont_id=`grep -P '^(*)' $net2custom | cut -f 2`
	exec_mode=`grep -P '^(*)' $net2custom | cut -f 3`
	simil_code=`grep -P '^(*)' $net2custom | cut -f 4`
	filter_factor=`grep -P '^(*)' $net2custom | cut -f 5`
	?
	similarity_builder.sh !pairs_to_paco_*!/(*) $ont_id $exec_mode "$simil_code"
	text2binary_matrix.rb -i semantic_similarity_list -o semantic_matrix_bin -t pair -s > similarity_metrics # Obtain statistical metrics and pass to matrix bin.

	if [ -s similarity_metrics ] ; then 
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' similarity_metrics >> ../similarity_metrics 
		echo -e "(*)\t$similarity_path/semantic_matrix_bin" >> ../similarity_tracker
	else
		exit 1
	fi
	#TODO (Maybe): Add the next topic in the report section.
	if [ $filter_factor == "F" ] ; then
		disparity_filter.R -i semantic_matrix_bin -o "./" -O semantic_matrix_bin
		text2binary_matrix.rb -i semantic_matrix_bin -o "filtered_semantic_matrix_bin" -t bin -s > filtered_metrics
		if [ -s filtered_metrics ] ; then 
		awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' filtered_metrics >> ../filtered_metrics 
		else
			exit 1
		fi
	fi
}


compare_kernel_[$kernel]){ 
	?
	%calc_kernel_[$nets]){
		# input: Similarity binary matrix
		# output: binary Kernel from similarity matrix + metrics
		source ~soft_bio_267/initializes/init_netanalyzer
		source ~soft_bio_267/initializes/init_ruby
		echo -e "(*)_compare_kernel_(+)\t(*)\tcompare_kernel_(+)" > tracker
		cp !calc_similarity_*!/semantic_matrix_bin.lst kernel_bin.lst # To pass the list of node names.
		kern_net_path=`pwd`
		?
		NetAnalyzer.rb -i !calc_similarity_*!/semantic_matrix_bin -f bin -l 'genes' -k compare_kernel_(+) -n kernel_bin.lst -u 'genes' -K ./kernel_matrix_bin
		text2binary_matrix.rb -i kernel_matrix_bin -o kernel_matrix_undo -t bin -s > kernel_metrics
		if [ -s kernel_matrix_undo ] ; then
			rm kernel_matrix_undo
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' kernel_metrics >> ../uncomb_kernel_metrics 
			echo -e "(*)_compare_kernel_(+)\t(*)\t$kern_net_path/kernel_matrix_bin" >> ../kernel_net_tracker 
		else 
	  		exit 1
	  	fi
	}

	%rank_genes_from_uncomb[$nets]){
		# Input: seed_gens + kernel.
		# Output: rank genes for every gen.
		source ~soft_bio_267/initializes/init_ruby
	    mkdir -p ../../report/candidates/uncomb_kernels/compare_kernel_(+)/(*)
	    #affected_genes=`wc -l $gens_seed`
		?
		ranker_genes.rb -k !calc_kernel_*!/kernel_matrix_bin -n !calc_kernel_*!/kernel_bin.lst -s $gens_seed
		#cp *_candidates ../../report/candidates/uncomb_kernels/compare_kernel_(+)/(*)
		count_candidate_files=`ls | grep -c _candidates`
		if [ $count_candidate_files -ge 1 ] ; then
			cp *_possible_candidates ../../report/candidates/uncomb_kernels/compare_kernel_(+)/(*)
		else 
	  		exit 1
	  	fi
	}

	%integrate_kernel_[$integration_types]){
		# input: kernel matrix from every net.
		# output: A combined binary kernel + metrics. 
		source ~soft_bio_267/initializes/init_ruby
		source ~soft_bio_267/initializes/init_netanalyzer
		# source ~federogc/software/initializes/init_integrate_kernel
		echo -e "(*)_compare_kernel_(+)\t(*)\tcompare_kernel_(+)" > tracker
		integrate_path=`pwd`
		?
		kernel_combined.rb -i (*) -t " !calc_kernel_!/kernel_matrix_bin " -n " !calc_kernel_!/kernel_bin.lst " -o general_matrix 
		text2binary_matrix.rb -i general_matrix -o general_matrix_undo -t bin -s > generalkernel_metrics
		if [ -s general_matrix_undo ] ; then
			rm general_matrix_undo
			# Now we prepare to create_metric_table.rb
			awk -v tracker="`cat tracker`" 'BEGIN{FS="\t";OFS="\t"}{gsub(/ - /,"_",$1); gsub(/ /,"_",$0); print tracker,$1,$2}' generalkernel_metrics >> ../comb_kernel_metrics 
			# Now we need to save the path of the integrated matrix.
			echo -e "(*)_compare_kernel_(+)\t$integrate_path/general_matrix" >> ../integrate_tracker 
		else 
	  		exit 1
	  	fi
	}

	%rank_genes_from_integrated){
		# Input: seed_gens + kernel.
		# Output: rank genes for every gen.
		source ~soft_bio_267/initializes/init_ruby
	    mkdir -p ../../report/candidates/integrated_kernels/compare_kernel_(+) 
	    #affected_genes=`wc -l $gens_seed`
		?
		ranker_genes.rb -k !integrate_kernel_*!/general_matrix -n !integrate_kernel_*!/general_matrix.lst -s $gens_seed # TODO: check the iteration part!
		#cp *_candidates ../../report/candidates/integrated_kernels/compare_kernel_(+)
		count_candidate_files=`ls | grep -c _candidates`
		if [ $count_candidate_files -ge 1 ] ; then
			cp *_possible_candidates ../../report/candidates/integrated_kernels/compare_kernel_(+)
		else 
	  		exit 1
	  	fi
	}
}


%corr_non_integrated_kernels_[$nets]){
	source ~soft_bio_267/initializes/init_R
	echo " !integrate_kernel_!/ " > probando
	# Calculate the number of last rows we need to use.
	total_nets=`echo "$nets" | tr -s ";" " " | wc -w`
	total_kernels=`echo "$kernel" | tr -s ";" " " | wc -w`
	last_rows=`echo $(($total_nets * $total_kernels))`
	# Obtain the path and names from those rows.
	path_kernel=`cat ../kernel_net_tracker | tail -n $last_rows | grep -w '(*)' | sort | uniq | cut -f3 | tr '\n' ','` 
	names_kernel=`cat ../kernel_net_tracker | tail -n $last_rows | grep -w '(*)' | sort | uniq | cut -f1 | tr '\n' ','`
	path_sim=`cat ../similarity_tracker | tail -n $total_nets | grep -w '(*)' | sort | uniq | cut -f2 | tr '\n' ','` 
	names_sim=`cat ../similarity_tracker | tail -n $total_nets | grep -w '(*)' | sort | uniq | cut -f1 | tr '\n' ','` 
	# all paths and names from kernels and similarities.
	all_paths="$path_sim$path_kernel"
	all_names="$names_sim$names_kernel"
	corr_method='spearman' 
	# Create the necesssary folders.
	mkdir -p ../../report/uncomb_corr
	echo "$all_paths" > flag
	?
	correlate_matrices.R -d $all_paths -m $corr_method -o "." -n $all_names -O (*)_"$corr_method"_correlation
	if [ -s (*)_"$corr_method"_correlation.png ] ; then
		cp ./(*)_"$corr_method"_correlation.png  ../../report/uncomb_corr/(*)_"$corr_method"_correlation.png
	else 
  		exit 1
  	fi
}

%corr_integrated_kernels){
	source ~soft_bio_267/initializes/init_R
	echo " !integrate_kernel_!/ " > probando
	# Calculate the number of last rows we need to use.
	total_integration_types=`echo "$integration_types" | tr -s ";" " " | wc -w`
	total_kernels=`echo "$kernel" | tr -s ";" " " | wc -w`
	last_rows=`echo $(($total_integration_types * $total_kernels))`
	# Obtain the path and names from those rows.
	path_kernel_int=`cat ../integrate_tracker | tail -n $last_rows | sort | uniq | cut -f2 | tr '\n' ','` 
	names_kernel_int=`cat ../integrate_tracker | tail -n $last_rows | sort | uniq | cut -f1 | tr '\n' ','`
	corr_method='spearman'
	mkdir -p ../../report
	?
	correlate_matrices.R -d $path_kernel_int  -m $corr_method -o "." -n $names_kernel_int -O int_kern_correlation
	if [ -s int_kern_correlation.png ] ; then
		cp ./int_kern_correlation.png  ../../report/int_kern_correlation.png
	else 
  		exit 1
  	fi
}
